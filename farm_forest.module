<?php

/**
 * @file
 * farmOS forest management module.
 */

include_once 'farm_forest.features.inc';

/**
 * Implements hook_help().
 */
function farm_forest_help($path, $arg) {

  // Add help text to the forest plan list page.
  if ($path == 'farm/plans/forest') {
    $help = '<p>' . t('This page lists all forest plans. Select one from the list below to view it, or click "Add forest plan" to create a new one.') . '</p>';
    $help .= '<p>' . t('Plans can be archived for future reference. To view archived plans, use the "Filter" options in the list below.') . '</p>';
    return $help;
  }

  // If the path starts with 'farm/plan/%', then load the plan and see if it is
  // a forest plan. If not, bail. Otherwise continue.
  if (strpos($path, 'farm/plan/%') === 0) {
    $plan = farm_plan_load($arg[2]);
    if (empty($plan) || $plan->type != 'forest') {
      return '';
    }
  }

  // Add help text to all farm/plan/% paths.
  switch ($path) {

    // Plan add/edit form.
    case 'farm/plan/add/forest':
    case 'farm/plan/%/edit':
      $help = '<p>' . t('Use the form below to configure the settings for this forest plan.') . '</p>';
      return $help;

    // Plan view page.
    case 'farm/plan/%':
    case 'farm/plan/%/view':
      $help = '<p>' . t('This page summarizes the details of this forest plan. Select one of the tabs to customize the plan.') . '</p>';
      $help .= '<p>' . t('To edit the plan, click the "Settings" tab.') . '</p>';
      return $help;

    // Area selection form.
    case 'farm/plan/%/area':
      $help = '<p>' . t('Select the area(s) that will be part of this plan. If they do not exist yet, start by <a href="!add_area">creating a new area</a>.', array('!add_area' => url('admin/structure/taxonomy/farm_areas/add', array('query' => array('destination' => current_path()))))) . '</p>';
      return $help;

    // Planting form.
    case 'farm/plan/%/planting':
      $help = '<p>' . t('Add planting(s) to this forest plan.') . '</p>';
      return $help;

    // Management form.
    case 'farm/plan/%/management':
      $help = '<p>' . t('Add forest management tasks to the plan.') . '</p>';
      return $help;

    // Inventory form.
    case 'farm/plan/%/inventory':
      $help = '<p>' . t('Record inventory observations associated with this plan.') . '</p>';
      return $help;

    // Harvest form.
    case 'farm/plan/%/harvest':
      $help = '<p>' . t('Record harvests associated with this plan.') . '</p>';
      return $help;
  }
}

/**
 * Implements hook_farm_ui_entities().
 */
function farm_forest_farm_ui_entities() {
  return array(
    'farm_plan' => array(
      'forest' => array(
        'label' => t('Forest Plan'),
        'label_plural' => t('Forest Plans'),
        'view' => 'farm_forest_plan',
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function farm_forest_menu() {

  // Area selection form.
  $items['farm/plan/%farm_plan/area'] = array(
    'title' => 'Area',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_area_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.area.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // Planting form.
  $items['farm/plan/%farm_plan/planting'] = array(
    'title' => 'Planting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_planting_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.planting.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  // Management form.
  $items['farm/plan/%farm_plan/management'] = array(
    'title' => 'Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_management_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.management.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  // Inventory form.
  $items['farm/plan/%farm_plan/inventory'] = array(
    'title' => 'Inventory',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_inventory_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.inventory.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );

  // Harvest form.
  $items['farm/plan/%farm_plan/harvest'] = array(
    'title' => 'Harvest',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_harvest_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.harvest.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  return $items;
}

/**
 * Access callback for forest plan tabs.
 */
function farm_forest_plan_access($plan) {

  // If the plan is not a forest plan, deny access.
  if ($plan->type != 'forest') {
    return FALSE;
  }

  // Defer to the farm plan access callback.
  return farm_plan_access('update', $plan);
}

/**
 * Implements hook_page_build().
 */
function farm_forest_page_build(&$page) {

  // Get the current path.
  $path = current_path();

  // Break it up into parts.
  $path_parts = explode('/', $path);

  // If this is not a plan area selection path, bail.
  if (count($path_parts) < 4 || !($path_parts[0] == 'farm' && $path_parts[1] == 'plan' && $path_parts[3] == 'area' && empty($path_parts[4]))) {
    return;
  }

  // Attempt to load the plan. Bail if unsuccessful.
  $plan = menu_get_object('farm_plan', 2);
  if (empty($plan)) {
    return;
  }

  // If the plan is not a forest plan, bail.
  if ($plan->type !== 'forest') {
    return;
  }

  // Build the areas map and add it to the page content.
  $page['content']['farm_areas'] = farm_map_build('farm_forest_areas');

  // Set the weight to 100 so that it appears on bottom.
  $page['content']['farm_areas']['#weight'] = 100;

  // Set the content region #sorted flag to FALSE so that it resorts.
  $page['content']['#sorted'] = FALSE;
}

/**
 * Helper function for loading a set of logs for a forest plan.
 *
 * @param $plan_id
 *   The plan ID.
 * @param $log_types
 *   An array of acceptable log type machine names.
 *
 * @return array
 *   Returns an array of logs.
 */
function farm_forest_plan_logs($plan_id, $log_types) {

  // Load a list of logs associated with this plan.
  $log_ids = farm_plan_linked_records('log', $plan_id);
  $logs = array();
  foreach ($log_ids as $id) {
    $log = log_load($id);
    if (!empty($log)) {
      $logs[] = $log;
    }
  }

  // Iterate through the logs and filter out non-matching types.
  $filtered_logs = array();
  foreach ($logs as $delta => $log) {
    if (in_array($log->type, $log_types)) {
      $filtered_logs[] = $log;
    }
  }

  // Sort the logs by timestamp ascending.
  usort($filtered_logs, 'farm_forest_plan_log_sort');

  // Return the logs.
  return $filtered_logs;
}

/**
 * Log details sub-form.
 *
 * @param $log
 *   The log entity, or NULL.
 * @param $log_types
 *   Array of acceptable log type names, keyed by log machine name.
 * @param $assets
 *   Asset entities that can be referenced by the log.
 * @param $allow_name
 *   Boolean: whether or not to allow the log name to be set/edited by the user.
 *   Defaults to TRUE.
 *
 * @return array
 *   Returns a form array that can be used in another form.
 *
 * @see farm_forest_plan_management_form().
 */
function farm_forest_plan_log_details_form($log=NULL, $log_types, $assets, $allow_name=TRUE) {

  // Build a fieldset for the form.
  $form = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // Save the log to the form values.
  $form['log'] = array(
    '#type' => 'value',
    '#value' => $log,
  );

  // Log type (only selectable for new logs).
  // If only one type is available, set it as a hidden value.
  if (!empty($log) || count($log_types) == 1) {
    reset($log_types);
    $log_type = key($log_types);
    $form['type'] = array(
      '#type' => 'value',
      '#value' => $log_type,
    );
  }
  else {
    $form['type'] = array(
      '#type' => 'select',
      '#title' => t('Type'),
      '#options' => $log_types,
    );
  }

  // Log name (if allowed).
  if ($allow_name) {
    $log_name = !empty($log->name) ? $log->name : '';
    $name_autocomplete_types = implode('+', array_keys($log_types));
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Task name'),
      '#autocomplete_path' => 'log/autocomplete/' . $name_autocomplete_types,
      '#default_value' => $log_name,
      '#required' => !empty($log->id),
    );
  }
  else {
    $form['name'] = array(
      '#type' => 'value',
      '#value' => !empty($log->name) ? $log->name : '',
    );
  }

  // Date field.
  $date_format = 'Y-m-d';
  $log_timestamp = !empty($log->timestamp) ? $log->timestamp : date($date_format);
  $form['date'] = array(
    '#type' => 'date_select',
    '#title' => t('Date'),
    '#date_format' => $date_format,
    '#date_label_position' => 'within',
    '#date_year_range' => '-3:+10',
    '#default_value' => $log_timestamp,
    '#required' => !empty($log->id),
  );

  // Iterate through assets already being referenced by the log, and build an
  // array of default values.
  $selected_assets = array();
  if (!empty($log->field_farm_asset[LANGUAGE_NONE])) {
    foreach ($log->field_farm_asset[LANGUAGE_NONE] as $asset_ref) {

      // If the target ID is empty, skip it.
      if (empty($asset_ref['target_id'])) {
        continue;
      }
      $asset_id = $asset_ref['target_id'];

      // Load the asset. If it can't be loaded, skip it.
      $asset = farm_asset_load($asset_id);
      if (empty($asset)) {
        continue;
      }

      // If the asset is not in $assets, add it.
      if (!array_key_exists($asset_id, $assets)) {
        if (!empty($asset)) {
          $assets[$asset_id] = $asset;
        }
      }

      // Add to the list of selected assets.
      $selected_assets[] = $asset_id;
    }
  }

  // Build a list of asset select options.
  $asset_options = array();
  foreach ($assets as $asset) {
    $asset_options[$asset->id] = entity_label('farm_asset', $asset);
  }

  // If no selected assets were found above, and this is not an existing log,
  // select all by default.
  if (empty($selected_assets) && empty($log)) {
    $selected_assets = array_keys($asset_options);
  }

  // Select planting assets.
  if (!empty($asset_options)) {
    $form['assets'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Plantings'),
      '#descriptions' => t('Select the planting(s) that this task is associated with.'),
      '#options' => $asset_options,
      '#default_value' => $selected_assets,
      '#weight' => 10,
    );
  }

  // Notes.
  $log_notes = !empty($log->field_farm_notes[LANGUAGE_NONE][0]['value']) ? $log->field_farm_notes[LANGUAGE_NONE][0]['value'] : '';
  $log_notes_format = !empty($log->field_farm_notes[LANGUAGE_NONE][0]['format']) ? $log->field_farm_notes[LANGUAGE_NONE][0]['format'] : 'farm_format';
  $form['notes'] = array(
    '#type' => 'text_format',
    '#title' => t('Notes'),
    '#format' => $log_notes_format,
    '#default_value' => $log_notes,
    '#weight' => 90,
  );

  // Done.
  $log_done = !empty($log->done) ? $log->done : FALSE;
  $form['done'] = array(
    '#type' => 'checkbox',
    '#title' => t('This task is done'),
    '#default_value' => $log_done,
    '#weight' => 100,
  );

  // Return the form array.
  return $form;
}

/**
 * Submit function for the log details sub-form.
 * This should be called from the submit function of the form that includes
 * the log details sub-form.
 *
 * @param $plan
 *   The forest plan entity.
 * @param $log_id
 *   The log id. If this is a new log, $log_id will be 'new'.
 * @param $values
 *   The form state values for a single log details sub-form.
 * @param $required
 *   A soft-required field. If this field is not empty, then a new log will be
 *   created. Defaults to 'name', but should be set to something else in forms
 *   where the log name is not editable.
 *
 * @return object|null
 *   Returns the log object.
 */
function farm_forest_plan_log_details_form_submit($plan, $log_id, $values, $required = 'name') {

  // Get the log date as a timestamp.
  $timestamp = strtotime($values['date']);

  // Load selected assets.
  $assets = array();
  if (!empty($values['assets'])) {
    foreach ($values['assets'] as $asset_id) {
      $asset = farm_asset_load($asset_id);
      if (!empty($asset)) {
        $assets[] = $asset;
      }
    }
  }

  // Load current location(s) (areas) of the plantings.
  $areas = array();
  foreach ($assets as $asset) {
    $locations = farm_movement_asset_location($asset);
    if (!empty($locations)) {
      foreach ($locations as $area) {
        $areas[] = $area;
      }
    }
  }

  // If no planting areas were found, get areas associated with the plan.
  if (empty($areas)) {
    $area_ids = farm_plan_linked_records('area', $plan->id);
    if (!empty($area_ids)) {
      foreach ($area_ids as $area_id) {
        $area = taxonomy_term_load($area_id);
        if (!empty($area)) {
          $areas[] = $area;
        }
      }
    }
  }

  // Get the log name.
  $name = $values['name'];

  // Automatically set the name of inventory logs.
  if (empty($name) && $values['type'] == 'farm_observation') {
    $name = t('Inventory');
  }

  // Load the log's "done" status.
  $done = !empty($values['done']) ? TRUE : FALSE;

  // If this is a new log...
  if ($log_id == 'new') {

    // Only proceed if the required field is set.
    if (empty($values[$required])) {
      return NULL;
    }

    // Get the log type.
    $type = $values['type'];

    // Create a new log entity.
    $log = farm_log_create($type, $name, $timestamp, $done, $assets);

    // Load a log entity metadata wrapper.
    $log_wrapper = entity_metadata_wrapper('log', $log);

    // Add notes to the log.
    if (!empty($values['notes']['value'])) {
      $log_wrapper->field_farm_notes = $values['notes'];
    }

    // Add areas to the log.
    if (!empty($areas)) {
      $log_wrapper->field_farm_area = $areas;
    }

    // Save the log again.
    $log_wrapper->save();

    // Link the log to the plan.
    farm_plan_link_record('log', $plan->id, $log->id);
  }

  // Or, if this is an existing log...
  else {

    // Get the log entity from form values.
    $log = $values['log'];

    // Create an entity metadata wrapper.
    $log_wrapper = entity_metadata_wrapper('log', $log);

    // Set log properties from form values.
    $log_wrapper->name->set($name);
    $log_wrapper->timestamp->set($timestamp);
    $log_wrapper->done->set($done);

    // Overwrite referenced log assets.
    $log_wrapper->field_farm_asset = $assets;

    // Overwrite referenced log areas.
    $log_wrapper->field_farm_area = $areas;

    // Save the notes.
    $log_wrapper->field_farm_notes = $values['notes'];

    // Save the log.
    $log_wrapper->save();
  }

  // Return the log.
  return $log;
}

/**
 * Log timestamp ascending sort function, for use as a usort() callback.
 */
function farm_forest_plan_log_sort($loga, $logb) {

  // If the timestamps are the same, sort by ID (ascending).
  if ($loga->timestamp == $logb->timestamp) {
    return ($loga->id < $logb->id) ? -1 : 1;
  }

  // Otherwise, sort by timestamp (ascending).
  return ($loga->timestamp < $logb->timestamp) ? -1 : 1;
}
